import { Text, View, TouchableOpacity, StyleSheet, Image, SafeAreaView, TextInput, ScrollView, KeyboardAvoidingView, Platform, ActivityIndicator, Alert } from "react-native";
import { useRouter, useLocalSearchParams } from "expo-router";
import { MaterialIcons } from '@expo/vector-icons';
import { horizontalScale, verticalScale, moderateScale, fontScale } from '../../utils/scaling';
import { useState, useRef, useEffect } from 'react';
import AsyncStorage from '@react-native-async-storage/async-storage';
import socketService from '../../services/socketService';
import chatService from '../../services/chatService';
import { sendMessageToGemini } from '../../services/geminiService';

interface Message {
  _id: string;
  sender: {
    _id: string;
    name: string;
    avatar?: string;
  };
  message: string;
  createdAt: string;
  system?: boolean;
}

const AI_HISTORY_KEY = 'ai_chat_history';
const AI_FEATURES_DESC = `
B·∫°n l√† tr·ª£ l√Ω cho app Brewtopia. App n√†y c√≥ c√°c t√≠nh nƒÉng: ƒë·∫∑t b√†n, ƒë·∫∑t ƒë·ªì u·ªëng, chat v·ªõi qu√°n, xem tin t·ª©c, t√≠ch ƒëi·ªÉm th∆∞·ªüng, ƒë·ªïi qu√†, thanh to√°n, h·ªó tr·ª£ t√†i kho·∫£n, xem ∆∞u ƒë√£i, livestream, v.v...
N·∫øu ng∆∞·ªùi d√πng h·ªèi v·ªÅ c√°c t√≠nh nƒÉng n√†y, h√£y h∆∞·ªõng d·∫´n chi ti·∫øt c√°ch s·ª≠ d·ª•ng, ch·ªâ d·∫´n r√µ r√†ng c√°c b∆∞·ªõc thao t√°c ho·∫∑c v·ªã tr√≠ n√∫t b·∫•m tr√™n app.
N·∫øu ng∆∞·ªùi d√πng h·ªèi v·ªÅ m·ªôt t√≠nh nƒÉng m√† app ch∆∞a c√≥, h√£y tr·∫£ l·ªùi: ‚ÄúT√≠nh nƒÉng n√†y ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn, b·∫°n vui l√≤ng ch·ªù c√°c b·∫£n c·∫≠p nh·∫≠t ti·∫øp theo.‚Äù
H√£y tr·∫£ l·ªùi th√¢n thi·ªán, ng·∫Øn g·ªçn, d·ªÖ hi·ªÉu.
`;
export default function Chat() {
  const router = useRouter();
  const { chatId, chatName, isGroup } = useLocalSearchParams();
  const [message, setMessage] = useState('');
  const [messages, setMessages] = useState<Message[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [currentUser, setCurrentUser] = useState<any>(null);
  const scrollViewRef = useRef<ScrollView>(null);
  const realChatIdRef = useRef<string>('');
  const [socketStatus, setSocketStatus] = useState<any>(null);

  useEffect(() => {
    const initializeChat = async () => {
      try {
        setLoading(true);
        // Get current user data
        const userData = await AsyncStorage.getItem('user_data');
        let parsedUserData = null;
        if (userData) {
          parsedUserData = JSON.parse(userData);
          setCurrentUser(parsedUserData);
          socketService.setCurrentUser(parsedUserData._id);
        }

        // N·∫øu l√† chat v·ªõi AI th√¨ kh√¥ng g·ªçi API, kh√¥ng join socket, kh√¥ng set listener
        if (chatId === 'ai') {
          // Load l·ªãch s·ª≠ chat AI t·ª´ AsyncStorage
          const aiHistory = await AsyncStorage.getItem(AI_HISTORY_KEY);
          setMessages(aiHistory ? JSON.parse(aiHistory) : []);
          setLoading(false);
          return;
        }

        // Get chat history
        realChatIdRef.current = Array.isArray(chatId) ? String(chatId[0]) : String(chatId);
        const history = await chatService.getChatHistory(String(realChatIdRef.current));
        setMessages(history);

        // Set up socket listeners TR∆Ø·ªöC KHI connect
        socketService.on('receiveMessage', (msg: Message) => {
          console.log('üî• Socket received message:', msg);
          // Map sender th√†nh object n·∫øu l√† string
          let senderObj = msg.sender;
          if (typeof msg.sender === 'string') {
            senderObj = { _id: msg.sender, name: 'Ng∆∞·ªùi d√πng', avatar: undefined };
          }
          const fixedMsg = { ...msg, sender: senderObj };

          setMessages(prev => {
            if (prev.some(m => m._id === fixedMsg._id)) return prev;
            console.log('üî• Adding new message to UI:', fixedMsg.message);
            return [...prev, fixedMsg];
          });
        });

        socketService.on('systemMessage', (data: { message: string }) => {
          console.log('üî• Socket received system message:', data);
          setMessages(prev => [...prev, { 
            _id: Date.now().toString(),
            sender: { _id: 'system', name: 'System' },
            message: data.message,
            createdAt: new Date().toISOString(),
            system: true
          }]);
        });

        // Connect to socket SAU KHI ƒë√£ set listeners
        console.log('üî• Connecting to socket...');
        const connected = await socketService.connect();
        console.log('üî• Socket connection result:', connected);
        
        // Join room sau khi ƒë√£ connect
        if (parsedUserData && connected) {
          console.log('üî• Joining room:', realChatIdRef.current, 'with user:', parsedUserData._id);
          const joined = await socketService.joinRoom(String(realChatIdRef.current), parsedUserData._id);
          console.log('üî• Room join result:', joined);
        }

        // C·∫≠p nh·∫≠t socket status ƒë·ªÉ debug
        const status = socketService.getConnectionStatus();
        setSocketStatus(status);
        console.log('üî• Final socket status:', status);

      } catch (err) {
        console.error('Error initializing chat:', err);
        setError('Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn ph√≤ng chat');
      } finally {
        setLoading(false);
      }
    };

    initializeChat();

    return () => {
      // N·∫øu l√† AI th√¨ kh√¥ng cleanup socket
      if (chatId === 'ai') return;
      socketService.removeListener('receiveMessage');
      socketService.removeListener('systemMessage');
      if (currentUser) {
        socketService.leaveRoom(String(realChatIdRef.current), currentUser._id);
      }
    };
  }, [chatId]);

  const handleClearAIHistory = async () => {
    Alert.alert(
      'X√≥a l·ªãch s·ª≠',
      'B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a to√†n b·ªô l·ªãch s·ª≠ chat v·ªõi BREWBOT?',
      [
        { text: 'H·ªßy', style: 'cancel' },
        { text: 'X√≥a', style: 'destructive', onPress: async () => {
          await AsyncStorage.removeItem(AI_HISTORY_KEY);
          setMessages([]);
        }}
      ]
    );
  };

  const handleSendMessage = async () => {
    if (!message.trim() || !currentUser) return;

    // N·∫øu l√† AI ch·ªâ x·ª≠ l√Ω local v√† Gemini
    if (chatName === 'BREWBOT' || chatId === 'ai') {
      try {
        // Th√™m tin nh·∫Øn ng∆∞·ªùi d√πng v√†o state
        const userMsg = {
          _id: Date.now().toString(),
          sender: {
            _id: currentUser._id,
            name: currentUser.name,
            avatar: currentUser.avatar || require('../../../assets/images/profile1.png')
          },
          message: message.trim(),
          createdAt: new Date().toISOString()
        };
        setMessages(prev => {
          const newMsgs = [...prev, userMsg, {
            _id: (Date.now() + 1).toString(),
            sender: {
              _id: 'ai',
              name: 'BREWBOT',
              avatar: require('../../../assets/images/bot1.png')
            },
            message: 'ƒêang so·∫°n tr·∫£ l·ªùi...',
            createdAt: new Date().toISOString()
          }];
          AsyncStorage.setItem(AI_HISTORY_KEY, JSON.stringify(newMsgs));
          return newMsgs;
        });
        setMessage('');

        // G·ª≠i prompt c√≥ prepend m√¥ t·∫£ t√≠nh nƒÉng app
        const prompt = `${AI_FEATURES_DESC}\nNg∆∞·ªùi d√πng: ${message.trim()}`;
        const response = await sendMessageToGemini(prompt);

        // Thay th·∫ø "ƒêang so·∫°n tr·∫£ l·ªùi..." b·∫±ng c√¢u tr·∫£ l·ªùi th·∫≠t
        setMessages(prev => {
          const idx = prev.findIndex(m => m.sender._id === 'ai' && m.message === 'ƒêang so·∫°n tr·∫£ l·ªùi...');
          if (idx !== -1) {
            const newMsgs = [...prev];
            newMsgs[idx] = {
              _id: (Date.now() + 2).toString(),
              sender: {
                _id: 'ai',
                name: 'BREWBOT',
                avatar: require('../../../assets/images/bot1.png')
              },
              message: response.text,
              createdAt: new Date().toISOString()
            };
            AsyncStorage.setItem(AI_HISTORY_KEY, JSON.stringify(newMsgs));
            return newMsgs;
          }
          return prev;
        });
      } catch (error) {
        setError('Kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn');
      }
      return;
    }

    // G·ª≠i l√™n server
    if (chatName === 'BREWBOT') {
      try {
        socketService.sendMessage({
          chatId: String(realChatIdRef.current),
          senderId: currentUser._id,
          message: message.trim()
        });

        // L·∫•y ph·∫£n h·ªìi AI
        const response = await sendMessageToGemini(message.trim());
        setMessages(prev => [...prev, {
          _id: (Date.now() + 1).toString(),
          sender: {
            _id: 'ai',
            name: 'BREWBOT',
            avatar: require('../../../assets/images/bot1.png')
          },
          message: response.text,
          createdAt: new Date().toISOString()
        }]);
      } catch (error) {
        setError('Kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn');
      }
    } else {
      console.log('üî• Sending message via socket:', {
        chatId: String(realChatIdRef.current),
        senderId: currentUser._id,
        message: message.trim()
      });
      
      socketService.sendMessage({
        chatId: String(realChatIdRef.current),
        senderId: currentUser._id,
        message: message.trim()
      });
      
      // Debug: check socket status sau khi g·ª≠i
      const statusAfterSend = socketService.getConnectionStatus();
      console.log('üî• Socket status after sending:', statusAfterSend);
    }

    setMessage('');
  };

  useEffect(() => {
    scrollViewRef.current?.scrollToEnd({ animated: true });
  }, [messages]);

  if (loading) {
    return (
      <SafeAreaView style={styles.container}>
        <View style={styles.loadingContainer}>
          <ActivityIndicator size="large" color="#6E543C" />
        </View>
      </SafeAreaView>
    );
  }

  return (
    <SafeAreaView style={styles.container}>
      {/* Header */}
      <View style={styles.header}>
        <TouchableOpacity onPress={() => router.back()} style={styles.backButton}>
          <MaterialIcons name="arrow-back" size={24} color="#FFF" />
        </TouchableOpacity>
        <View style={styles.headerContent}>
          <Image
            source={(() => {
              if (chatName === 'BREWBOT') {
                return require('../../../assets/images/bot1.png');
              }
              // T√¨m avatar user ƒë·ªëi ph∆∞∆°ng trong messages (n·∫øu c√≥ participants th√¨ n√™n l·∫•y t·ª´ participants)
              const otherMsg = messages.find(m => m.sender && m.sender._id !== currentUser?._id && m.sender._id !== 'system');
              let avatar = otherMsg?.sender?.avatar;
              if (!avatar || avatar === 'false') {
                // random avatar t·ª´ randomuser.me d·ª±a v√†o id
                const id = otherMsg?.sender?._id || 'default';
                const hash = Math.abs(id.split('').reduce((acc, c) => acc + c.charCodeAt(0), 0)) % 100;
                return { uri: `https://randomuser.me/api/portraits/men/${hash}.jpg` };
              }
              return typeof avatar === 'string' ? { uri: avatar } : avatar;
            })()}
            style={styles.profileImage}
          />
          <View>
            <Text style={styles.headerTitle}>{chatName}</Text>
            {socketStatus && chatId !== 'ai' && (
              <Text style={[styles.socketStatus, { color: socketStatus.connected ? '#4CAF50' : '#F44336' }]}>
                Socket: {socketStatus.connected ? '‚úÖ K·∫øt n·ªëi' : '‚ùå Ng·∫Øt k·∫øt n·ªëi'}
              </Text>
            )}
          </View>
        </View>
        {chatId !== 'ai' && (
          <TouchableOpacity 
            style={styles.debugButton}
            onPress={() => {
              const status = socketService.getConnectionStatus();
              setSocketStatus(status);
              Alert.alert('Socket Debug', `
Connected: ${status.connected}
Socket ID: ${status.socketId || 'None'}
User ID: ${status.currentUserId || 'None'}
Attempts: ${status.connectionAttempts}
              `);
            }}
          >
            <MaterialIcons name="bug-report" size={20} color="#FFF" />
          </TouchableOpacity>
        )}
      </View>

      {/* Chat Messages */}
      <KeyboardAvoidingView 
        behavior={Platform.OS === "ios" ? "padding" : "height"}
        style={styles.keyboardAvoidingView}
        keyboardVerticalOffset={Platform.OS === "ios" ? 90 : 0}
      >
        <ScrollView 
          ref={scrollViewRef}
          style={styles.messageContainer}
          onContentSizeChange={() => scrollViewRef.current?.scrollToEnd({ animated: true })}
        >
          {messages.map((msg) => (
            msg.system ? null : (
              <View 
                key={msg._id}
                style={[
                  styles.messageWrapper,
                  msg.sender._id === currentUser?._id ? styles.myMessage : styles.otherMessage
                ]}
              >
                {!msg.system && msg.sender._id !== currentUser?._id && (
                  <Image 
                    source={msg.sender.avatar || require('../../../assets/images/profile1.png')}
                    style={styles.messageAvatar}
                  />
                )}
                <View style={[
                  styles.messageBubble,
                  msg.sender._id === currentUser?._id ? styles.myBubble : styles.otherBubble,
                  msg.system && styles.systemBubble
                ]}>
                  <Text style={[
                    styles.messageText,
                    msg.sender._id === currentUser?._id ? styles.myMessageText : styles.otherMessageText,
                    msg.system && styles.systemMessageText
                  ]}>{msg.message}</Text>
                </View>
                <Text style={styles.messageTime}>
                  {msg.createdAt && !isNaN(new Date(msg.createdAt).getTime())
                    ? new Date(msg.createdAt).toLocaleTimeString('vi-VN', { hour: '2-digit', minute: '2-digit' })
                    : ''}
                </Text>
              </View>
            )
          ))}
        </ScrollView>

        {/* Input Area */}
        <View style={styles.inputContainer}>
          <TextInput
            style={styles.input}
            value={message}
            onChangeText={setMessage}
            placeholder="Nh·∫≠p tin nh·∫Øn..."
            placeholderTextColor="#999"
            multiline
            maxLength={1000}
          />
          <TouchableOpacity 
            style={styles.sendButton}
            onPress={handleSendMessage}
          >
            <MaterialIcons name="send" size={24} color="#6E543C" />
          </TouchableOpacity>
        </View>
      </KeyboardAvoidingView>

      {error && (
        <View style={styles.errorContainer}>
          <Text style={styles.errorText}>{error}</Text>
          <TouchableOpacity onPress={() => setError(null)}>
            <MaterialIcons name="close" size={20} color="#FFF" />
          </TouchableOpacity>
        </View>
      )}

      {chatId === 'ai' && (
        <TouchableOpacity style={{position: 'absolute', top: 10, right: 16, zIndex: 10}} onPress={handleClearAIHistory}>
          <MaterialIcons name="delete" size={24} color="#fff" />
        </TouchableOpacity>
      )}
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#FFF5EA',
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    padding: moderateScale(16),
    backgroundColor: '#6E543C',
  },
  backButton: {
    marginRight: horizontalScale(16),
  },
  headerContent: {
    flex: 1,
    flexDirection: 'row',
    alignItems: 'center',
  },
  headerTitle: {
    fontSize: fontScale(18),
    fontWeight: '600',
    color: '#FFFFFF',
    marginLeft: horizontalScale(12),
  },
  socketStatus: {
    fontSize: fontScale(12),
    marginLeft: horizontalScale(12),
    marginTop: verticalScale(2),
  },
  debugButton: {
    padding: moderateScale(8),
    borderRadius: moderateScale(20),
    backgroundColor: 'rgba(255, 255, 255, 0.2)',
  },
  profileImage: {
    width: horizontalScale(40),
    height: verticalScale(40),
    borderRadius: horizontalScale(20),
  },
  keyboardAvoidingView: {
    flex: 1,
  },
  messageContainer: {
    flex: 1,
    padding: moderateScale(16),
  },
  messageWrapper: {
    marginBottom: verticalScale(16),
    maxWidth: '80%',
  },
  myMessage: {
    alignSelf: 'flex-end',
  },
  otherMessage: {
    alignSelf: 'flex-start',
    flexDirection: 'row',
    alignItems: 'flex-end',
  },
  messageAvatar: {
    width: horizontalScale(30),
    height: verticalScale(30),
    borderRadius: horizontalScale(15),
    marginRight: horizontalScale(8),
  },
  messageBubble: {
    padding: moderateScale(12),
    borderRadius: moderateScale(16),
    marginBottom: verticalScale(4),
  },
  myBubble: {
    backgroundColor: '#6E543C',
  },
  otherBubble: {
    backgroundColor: '#FFFFFF',
  },
  systemBubble: {
    backgroundColor: '#F5F5F5',
    alignSelf: 'center',
    marginVertical: verticalScale(8),
  },
  messageText: {
    fontSize: fontScale(16),
  },
  myMessageText: {
    color: '#FFFFFF',
  },
  otherMessageText: {
    color: '#000000',
  },
  systemMessageText: {
    color: '#666666',
    fontStyle: 'italic',
  },
  messageTime: {
    fontSize: fontScale(12),
    color: '#666666',
    alignSelf: 'flex-end',
    marginTop: verticalScale(4),
  },
  inputContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    padding: moderateScale(12),
    backgroundColor: '#FFFFFF',
    borderTopWidth: 1,
    borderTopColor: '#E5E5EA',
  },
  input: {
    flex: 1,
    minHeight: verticalScale(40),
    maxHeight: verticalScale(100),
    backgroundColor: '#F2F2F7',
    borderRadius: moderateScale(20),
    paddingHorizontal: horizontalScale(16),
    paddingVertical: verticalScale(8),
    fontSize: fontScale(16),
  },
  sendButton: {
    marginLeft: horizontalScale(12),
    width: horizontalScale(40),
    height: verticalScale(40),
    justifyContent: 'center',
    alignItems: 'center',
  },
  errorContainer: {
    position: 'absolute',
    bottom: verticalScale(80),
    left: horizontalScale(16),
    right: horizontalScale(16),
    backgroundColor: '#FF3B30',
    padding: moderateScale(12),
    borderRadius: moderateScale(8),
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
  },
  errorText: {
    color: '#FFFFFF',
    fontSize: fontScale(14),
    flex: 1,
    marginRight: horizontalScale(8),
  },
}); 